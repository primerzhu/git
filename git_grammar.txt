cd 地址用 / 不用 \
git init初始化仓库
git add filename -> git commit -m 'discription' 添加文件
git reset --hard commit_id 回到特定版本
git log  git reflog查看不同版本号  可以任意commit版本切换
HEAD^指针指向当前版本号
git checkout -- file 丢弃当工作区的修改
如果add到暂存区 使用 git reset HEAD<file>可以撤销(unstage)掉暂存区的内容，重新放回工作区

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，
但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
用git checkout -- <file>回退版本

由本地创建远程仓库
首先git remote add origin git@github.com:primerzhu/git.git
再git push -u origin master 完成远程仓库创建

之后再有什么东西需要向远程更新 由git push origin master执行

git clone git@github.com:primerzhu/gitskills.git 拉取远程仓库

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
这两句合起来的效果与下一句相同
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

git分支冲突
本地的master创建分支dev后（checkout -b dev）各自在dev分支与master分支进行分别创建
之后使用git merge dev命令
会提示CONFLICT(content):Merge conflict in readme.txt  需要手动修改文件以消除分支区别
可以使用git log --graph查看分支图
最后使用git branch -d dev

通常合并分支时，git会默认使用fast forward方式。该方式下，删除分支后会丢掉分支信息。
以--no-ff方式进行git merge
git merge --no-ff -m"merge with no ff" dev  这次合并要创建一个新的commit 所以加上-m参数，把commit描述写进去
git log --graph --pretty=oneline --abbrev-commit 以图的形式展示分支情况，并简化描述作者与时间，只保留描述与版本号 方便切换分支与版本
分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
